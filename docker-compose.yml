name: agricultural-dev

services:
  backend:
    build:
      context: ./agricultural-backend
      dockerfile: Dockerfile.dev
    container_name: agricultural-backend
    ports:
      - "4000:3000" # Host:Container (Nest listens on 3000)
    env_file:
      - ./agricultural-backend/.env
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=300
      - TZ=Asia/Bangkok
      # ถ้าไม่ได้ใส่ใน .env ให้ใส่ตรงนี้แทน (ตัวอย่าง):
      # - MONGODB_URI=mongodb://root:example@mongodb:27017/agricultural?authSource=admin
    volumes:
      - ./agricultural-backend:/app:delegated
      - backend_node_modules:/app/node_modules
    command: ["pnpm", "start:dev"] # Nest watch
    working_dir: /app
    depends_on:
      mongodb:
        condition: service_healthy

  frontend:
    build:
      context: ./agricultural-frontend
      dockerfile: Dockerfile.dev
    container_name: agricultural-frontend
    ports:
      - "3000:3000" # Next dev server
    env_file:
      - ./agricultural-frontend/.env
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - TZ=Asia/Bangkok
      - NEXT_PUBLIC_API_BASE=http://localhost:4000
    volumes:
      - ./agricultural-frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
    # สำคัญ: ให้ Next bind 0.0.0.0
    command: ["pnpm", "dev", "-p", "3000", "--hostname", "0.0.0.0"]
    working_dir: /app

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s


volumes:
  backend_node_modules:
  frontend_node_modules:
  mongo_data:
